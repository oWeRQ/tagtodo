// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone', 'app'], function(_, Backbone, App) {
    var Tag, crc16, str2color;
    crc16 = function(str) {
      var c, crc, i, _i, _j, _ref;
      crc = 0xFFFF;
      for (c = _i = 0, _ref = str.length; 0 <= _ref ? _i < _ref : _i > _ref; c = 0 <= _ref ? ++_i : --_i) {
        crc ^= str.charCodeAt(c) << 8;
        for (i = _j = 0; _j < 8; i = ++_j) {
          if (crc & 0x8000) {
            crc = (crc << 1) ^ 0x1021;
          } else {
            crc = crc << 1;
          }
        }
      }
      return crc & 0xFFFF;
    };
    str2color = function(str) {
      var hue, lightness, saturation;
      hue = Math.floor(crc16(str) / 0xFFFF * 18) * 20;
      saturation = 45;
      lightness = 40;
      return 'hsl(' + hue + ',' + saturation + '%,' + lightness + '%)';
    };
    Tag = Backbone.Model.extend({
      idAttribute: 'id',
      defaults: {
        name: '',
        count: 0,
        tasks: []
      },
      initialize: function() {
        return this.on('destroy', this.clearTags, this);
      },
      addTask: function(task_id) {
        var tagTasks;
        tagTasks = this.get('tasks');
        if (_.indexOf(tagTasks, task_id) === -1) {
          tagTasks.push(task_id);
          this.set('tasks', tagTasks);
          return this.trigger('change:tasks');
        }
      },
      removeTask: function(task_id) {
        var tagTasks;
        tagTasks = this.get('tasks');
        tagTasks = _.without(tagTasks, task_id);
        if (tagTasks.length === 0) {
          return this.destroy();
        } else {
          return this.set('tasks', tagTasks);
        }
      },
      clearTags: function() {
        var idx;
        idx = _.indexOf(App.tasksView.currentTags, this);
        if (idx !== -1) {
          App.tasksView.currentTags.splice(idx, 1);
          return App.tasksView.applyFilter();
        }
      },
      getColor: function() {
        return str2color(this.get('name'));
      }
    });
    return Tag;
  });

}).call(this);
