// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone', 'app', 'collections/tags'], function(_, Backbone, App, Tags) {
    var Task;
    Task = Backbone.Model.extend({
      idAttribute: 'id',
      defaults: {
        status: 0,
        body: '',
        tags: [],
        deadline: '0000-00-00',
        weight: 0
      },
      view: null,
      initialize: function() {
        this.on('change:tags', this.changeTags, this);
        this.on('change:body', this.parseTags, this);
        this.on('add', this.parseTags, this);
        return this.on('destroy', this.clearTags, this);
      },
      getWeight: function() {
        return parseInt(this.get('weight'), 10) || this.id * 1024;
      },
      getTags: function() {
        return new Tags(_.map(this.get('tags'), App.tags.get, App.tags));
      },
      parseTags: function() {
        var createTagsDone, createTagsTotal, fireSet, newTags, task;
        task = this;
        newTags = [];
        createTagsTotal = 0;
        createTagsDone = 0;
        fireSet = function() {
          if (createTagsTotal === 0 || createTagsDone === createTagsTotal) {
            task.set('tags', newTags);
            return true;
          }
          return false;
        };
        _.each(this.get('body').match(/#([^\s]+)/g), function(hashTag) {
          var tag, tagName;
          tagName = hashTag.substr(1);
          if (tagName.length === 0) {
            return;
          }
          tag = App.tags.where({
            name: tagName
          })[0];
          if (tag) {
            return newTags.push(tag.id);
          } else {
            createTagsTotal++;
            return App.tags.create({
              name: tagName,
              tasks: []
            }, {
              wait: true,
              success: function(tag) {
                newTags.push(tag.id);
                createTagsDone++;
                return fireSet();
              }
            });
          }
        });
        return fireSet();
      },
      changeTags: function() {
        var addedTags, newTags, oldTags, removedTags;
        oldTags = this.previous('tags');
        newTags = this.get('tags');
        addedTags = _.difference(newTags, oldTags);
        removedTags = _.difference(oldTags, newTags);
        _.each(addedTags, this.addTag, this);
        _.each(removedTags, this.removeTag, this);
        return this.save(null, {
          silent: true,
          success: function() {}
        });
      },
      clearTags: function() {
        return _.each(this.get('tags'), this.removeTag, this);
      },
      addTag: function(tag_id) {
        var tag;
        tag = App.tags.get(tag_id);
        return tag.addTask(this.id);
      },
      removeTag: function(tag_id) {
        var tag;
        tag = App.tags.get(tag_id);
        return tag.removeTask(this.id);
      }
    });
    return Task;
  });

}).call(this);
