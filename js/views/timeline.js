// Generated by CoffeeScript 1.3.3
(function() {

  define(['underscore', 'backbone', 'app', 'text!templates/timelineDay.html'], function(_, Backbone, App, dayTemplate) {
    var TimelineView;
    TimelineView = Backbone.View.extend({
      dayTemplate: _.template(dayTemplate),
      events: {
        'click .currentMonth': 'setCurrentMonth',
        'click .prevMonth': 'prevMonth',
        'click .nextMonth': 'nextMonth',
        'click li': 'showDay'
      },
      year: 0,
      month: 0,
      initialize: function() {
        var date;
        date = new Date();
        this.year = date.getFullYear();
        this.month = date.getMonth() + 1;
        this.currentMonth = this.$('.currentMonth');
        this.timelineList = this.$('.timelineList');
        App.tasks.on('reset', this.render, this);
        return App.tasks.on('change:deadline', this.render, this);
      },
      render: function() {
        var countByDay, currentDate, date, dateAtom, day, dayTotalTasks, dayUndoneTasks, daysInMonth, isToday, isWeekend, li, maxByDay, tagsTaskIds, today, _i, _ref, _ref1;
        currentDate = App.tasksView.currentDate;
        today = $.datepicker.formatDate($.datepicker.ATOM, new Date());
        date = new Date(this.year, this.month, 0);
        daysInMonth = date.getDate();
        tagsTaskIds = App.tasksView.getCurrentTagsTaskIds();
        countByDay = App.tasks.countByDay(tagsTaskIds);
        maxByDay = _.reduce(countByDay, function(memo, num) {
          if (memo > num.total) {
            return memo;
          } else {
            return num.total;
          }
        }, 0);
        this.currentMonth.html($.datepicker.formatDate('MM, yy', date));
        this.timelineList.find('li').droppable('destroy');
        this.timelineList.empty();
        for (day = _i = 1; 1 <= daysInMonth ? _i <= daysInMonth : _i >= daysInMonth; day = 1 <= daysInMonth ? ++_i : --_i) {
          date = new Date(this.year, this.month - 1, day);
          dateAtom = $.datepicker.formatDate($.datepicker.ATOM, date);
          isWeekend = date.getDay() % 6 === 0;
          isToday = dateAtom === today;
          dayTotalTasks = (_ref = countByDay[dateAtom]) != null ? _ref.total : void 0;
          dayUndoneTasks = (_ref1 = countByDay[dateAtom]) != null ? _ref1.undone : void 0;
          li = $('<li>').data('date', dateAtom).html(this.dayTemplate({
            day: day,
            totalPercent: (dayTotalTasks ? dayTotalTasks / maxByDay * 100 : 0),
            undonePercent: (dayUndoneTasks ? dayUndoneTasks / maxByDay * 100 : 0)
          }));
          if (dayTotalTasks) {
            li.attr('title', 'Total: ' + dayTotalTasks + ' Undone: ' + dayUndoneTasks);
          }
          if (dateAtom === currentDate) {
            li.addClass('active');
          }
          li.toggleClass('weekend', isWeekend).toggleClass('today', isToday).appendTo(this.timelineList);
          li.droppable({
            tolerance: 'pointer',
            hoverClass: 'droppable-hover',
            drop: function(event, ui) {
              var targetDate, task;
              targetDate = $(event.target).data('date');
              task = App.tasks.get(ui.draggable.data('id'));
              return task.save({
                deadline: targetDate
              });
            }
          });
        }
        return this;
      },
      setCurrentMonth: function() {
        var date;
        date = new Date();
        this.year = date.getFullYear();
        this.month = date.getMonth() + 1;
        return this.render();
      },
      prevMonth: function() {
        if (--this.month === 0) {
          this.year--;
          this.month = 12;
        }
        return this.render();
      },
      nextMonth: function() {
        if (++this.month === 13) {
          this.year++;
          this.month = 1;
        }
        return this.render();
      },
      showDay: function(e) {
        var date, li;
        li = $(e.target).closest('li');
        date = li.data('date');
        if (li.hasClass('active')) {
          li.removeClass('active');
          App.tasksView.setFilterDate(null);
          return App.tasksView.applyFilter();
        } else {
          li.addClass('active').siblings().removeClass('active');
          App.tasksView.setFilterDate(date);
          return App.tasksView.applyFilter();
        }
      }
    });
    return TimelineView;
  });

}).call(this);
